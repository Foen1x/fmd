package com.tss.formdesigner.parser;

import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.util.logging.Logger;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import net.sf.json.JSONObject;

import com.tss.util.FmdSettings;

public abstract class AbstractJsParser implements Parser {
	
	protected ScriptEngine engine;//script engine
	protected String skin;//form skin
	protected String realPath;//real path
	protected String lang;//language
	//logger
	protected Logger logger = Logger.getLogger(AbstractJsParser.class.getName());
	
	/**
	 * init the parser
	 * @param realPath
	 * @param skin
	 * @param lang
	 * @throws Exception
	 */
	public void init(String realPath, String skin, String lang) throws Exception {
		this.skin = skin;
		this.realPath = realPath;
		this.lang = lang;
		String implShortName = this.getClass().getSimpleName();
		// engine manager
		ScriptEngineManager engineManager = new ScriptEngineManager();
		// 得到脚本引擎
		this.engine = engineManager.getEngineByName("JavaScript");
		//put logger
		engine.put("logger", logger);
		// 引入工具库
		engine.eval(new java.io.FileReader(
				realPath + "/js/3rdpartyother/json2.js"));
		engine.eval(new java.io.FileReader(
				realPath + "/js/3rdpartyother/json2html.js"));
		
		engine.eval("Parser = function() {};");
		engine.eval("Parser.log = function(msg) {logger.finer('[JS:"+implShortName+"]:'+(msg==null ? 'undefined' : msg.toString()));};");
		engine.eval("Parser.warning = function(msg) {logger.warning('[JS:"+implShortName+"]:'+(msg==null ? 'undefined' : msg.toString()));};");
		engine.eval("Parser.formskin='"+skin+"';");	//skin name
		engine.eval("Parser.lang='"+lang+"';");	//lang
		engine.eval("Parser.impl='"+implShortName+"';");	//impl
		engine.eval("Parser.fmdv = {};");	//variables auto generated by parser
		engine.eval("Parser.fmdv.dataprovider = {};");	//dataprovider that need to be further parsed, such as dictionary, rest service
		engine.eval("Parser.generatedscript = '';");	//script auto generated by parser
		engine.eval("Parser.log('Parser.formskin=='+Parser.formskin)");
		engine.eval("Parser.log('Parser.lang=='+Parser.lang)");
		engine.eval("Parser.log('Parser.impl=='+Parser.impl)");
		
		engine.eval(new java.io.FileReader(
				realPath + FmdSettings.getValue(FmdSettings.MODULE_PATH_BASE) + "/"+implShortName+".js"));
		
		//import modules
		importAllModules(engine);
	}
	
	/**
	 * get form js parser config by formtype
	 * @param formtype
	 * @return
	 * @throws ScriptException
	 */
	public JSONObject getFormJsParserConfig(String formtype) throws ScriptException {
		String key = "form:"+formtype+":"+this.skin+":"+this.getClass().getSimpleName()+":parserconfig";
		logger.finer("getFormJsParserConfig finding key="+key);
		String cfgstr = (String)engine.eval("Parser['"+key+"'] ? JSON.stringify(Parser['"+key+"']) : ''");
		if (cfgstr==null || cfgstr.trim().length()==0) {
			return null;
		} else {
			return JSONObject.fromObject(cfgstr);
		}
	}
	
	/**
	 * import modules
	 * @param engine
	 * @throws FileNotFoundException
	 * @throws ScriptException
	 */
	private void importAllModules(ScriptEngine engine) throws FileNotFoundException, ScriptException {
		File mFolder = new File(realPath + 
				FmdSettings.getValue(FmdSettings.MODULE_PATH_BASE));
		File[] types = mFolder.listFiles(new FileFilter(){
			@Override
			public boolean accept(File arg0) {
				return arg0.isDirectory();
			}
		});
		for (File t : types) {
			String[] mns = t.list();
			for (String mn : mns) {
				logger.finer("importAllModules find module: "+t.getName()+"/"+mn);
				File mnf = new File(realPath + 
						FmdSettings.getValue(FmdSettings.MODULE_PATH_BASE) + "/"+ t.getName()+"/"+mn+"/parser.js");
				if (mnf.exists()) {
					engine.eval(new java.io.FileReader(mnf));
				}
			}
		}
	}

}
